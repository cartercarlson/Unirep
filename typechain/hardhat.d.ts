/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IUnirep",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnirep__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "Hasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hasher__factory>;
    getContractFactory(
      name: "Unirep",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Unirep__factory>;
    getContractFactory(
      name: "EpochKeyValidityVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EpochKeyValidityVerifier__factory>;
    getContractFactory(
      name: "ProcessAttestationsVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProcessAttestationsVerifier__factory>;
    getContractFactory(
      name: "ReputationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReputationVerifier__factory>;
    getContractFactory(
      name: "StartTransitionVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StartTransitionVerifier__factory>;
    getContractFactory(
      name: "UserSignUpVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserSignUpVerifier__factory>;
    getContractFactory(
      name: "UserStateTransitionVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserStateTransitionVerifier__factory>;

    getContractAt(
      name: "IUnirep",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnirep>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "Hasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Hasher>;
    getContractAt(
      name: "Unirep",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Unirep>;
    getContractAt(
      name: "EpochKeyValidityVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EpochKeyValidityVerifier>;
    getContractAt(
      name: "ProcessAttestationsVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProcessAttestationsVerifier>;
    getContractAt(
      name: "ReputationVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReputationVerifier>;
    getContractAt(
      name: "StartTransitionVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StartTransitionVerifier>;
    getContractAt(
      name: "UserSignUpVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserSignUpVerifier>;
    getContractAt(
      name: "UserStateTransitionVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserStateTransitionVerifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
